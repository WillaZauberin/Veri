clear
clc
% 创建音频数据存储
dataFolder = 'E:\XinYuan\USTC_AAA\data\pc\Train\Hi'; % 替换为实际的音频数据路径
ads = audioDatastore(dataFolder, 'IncludeSubfolders', true, 'FileExtensions', '.wav', 'LabelSource', 'foldernames');

% 步骤 2：数据预处理
function features = extractFeatures(audio, fs)
    % 计算 MFCC 特征
    features = mfcc(audio, fs);
end

% 初始化特征数据和标签
numFiles = numel(ads.Files);
allFeatures = [];
allLabels = [];

% 遍历每个音频文件，提取特征
while hasdata(ads)
    [audio, info] = read(ads); % 读取音频文件和信息
    fs = info.SampleRate; % 获取采样率
    features = extractFeatures(audio, fs); % 提取特征
    allFeatures = cat(4, allFeatures, features); % 将特征堆叠起来
    allLabels = [allLabels; info.Label]; % 收集标签
end

% 转换为适合训练的数据格式
numFeatures = size(allFeatures, 1);
numFrames = size(allFeatures, 2);
numSamples = size(allFeatures, 4);
X = permute(allFeatures, [1, 2, 3, 4]);
Y = categorical(allLabels);

% 步骤 3：模型设计与训练
layers = [
    imageInputLayer([numFeatures, numFrames, 1])
    convolution2dLayer(3, 8, 'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    maxPooling2dLayer(2, 'Stride', 2)
    fullyConnectedLayer(numel(categories(Y)))
    softmaxLayer
    classificationLayer];

options = trainingOptions('adam', ...
    'MaxEpochs', 10, ...
    'MiniBatchSize', 128, ...
    'Plots', 'training-progress', ...
    'Shuffle', 'every-epoch', ...
    'ValidationData', {X, Y});

% 训练模型
net = trainNetwork(X, Y, layers, options);

% 步骤 4：保存模型
save('KWSNet.mat', 'net');

% 步骤 5：打包数据
filesToZip = {'KWSNet.mat'};
zipFileName = 'KeywordSpotting.zip';
zip(zipFileName, filesToZip);

%% hua